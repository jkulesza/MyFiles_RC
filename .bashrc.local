# Pull in HPC /etc/bashrc settings.
if [ -f /etc/bashrc ]; then
  source /etc/bashrc
fi

################################################################################
# Generic customizations.
################################################################################

export RCGITDIR=$HOME/MyFiles_RC
export BREWDIR=$HOME/Applications/brew

alias :q=exit

alias c='cd && clear'
alias g='git'
alias h='history | tail'

alias cd..='cd ..'
alias path='echo $PATH | tr ":" "\n" | cat -n'
alias lsd='dirs | tr " " "\n"'
alias jn='jupyter notebook'
alias lmk='latexmk -pvc -pdf -interaction=nonstopmode '

alias 2..='cd ../..'
alias 3..='cd ../../..'
alias 4..='cd ../../../..'
alias 5..='cd ../../../../..'
alias 6..='cd ../../../../../..'

# Windows-like aliases.
alias copy='cp'
alias dir='ls -al'
alias del='rm'

# Setup proxy.
export  HTTP_PROXY=
export HTTPS_PROXY=
# Setup proxy for Homebrew.
export   ALL_PROXY=$HTTP_PROXY
export    NO_PROXY=127.0.0.1,localhost,.local

# Set default editor to system vim.
alias vi=vim
export EDITOR=vim

# Only perform autocompletion on `cd` for directories.
complete -d cd &> /dev/null

# Prevent Python from writing bytecode (.pyc) files.  This is fast so the time
# sacrifice isn't significant but it keeps file spaces clean.
# from: http://docs.python-guide.org/en/latest/writing/gotchas/#disabling-bytecode-pyc-files
export PYTHONDONTWRITEBYTECODE=1

# If available, set matplotlib defaults.
if [ -f $RCGITDIR/matplotlibrc ]; then
  export MATPLOTLIBRC=$RCGITDIR
fi

# Configure custom aliases in $HOME/bin.
if [ -d "$HOME/bin" ]; then
  alias cleanmcnp='python $HOME/bin/mcnp_clean.py'
  alias mcnpclean='python $HOME/bin/mcnp_clean.py'
  export PATH="$HOME/bin:$PATH"

  if [ -d "$HOME/bin/rcbin" ]; then
    alias mg='$HOME/bin/rcbin//mygit.py'
    if [ -d "$HOME/bin/rcbin/My_Python_Classes" ]; then
      export PYTHONPATH=$HOME/bin/rcbin/My_Python_Classes:$PYTHONPATH
    fi
  fi
fi

# Configure custom software path in $HOME directory.  This is useful for package
# manager deployment (e.g., MacPorts) or self-compiled and installed software.
if [ -d "$HOME/SW/$(hostname -s)" ]; then
  # Set paths to generic installation location based on machine (because some
  # file spaces are shared).
  export SW=$HOME/SW/$(hostname -s)
  export PATH=$SW/bin:$PATH
  export LD_LIBRARY_PATH=$SW/lib:$LD_LIBRARY_PATH

  # Update default editor to self-compiled vim, if available.
  if [ -f $SW/bin/vim ]; then
    export EDITOR=$SW/bin/vim
  fi
fi

# Customize prompt (old style).
    RESET="\[\033[0;38m\]"
    BLACK="\[\033[0;30m\]"
      RED="\[\033[0;31m\]"
 LIGHTRED="\[\033[1;31m\]"
     GREY="\[\033[0;37m\]"
    WHITE="\[\033[0;38m\]"
   YELLOW="\[\033[1;33m\]"
     TEAL="\[\033[0;36m\]"

   BG_RED="\[\033[30;41m\]"
BG_YELLOW="\[\033[30;43m\]"
  BG_TEAL="\[\033[30;46m\]"

export PS1HOST=$WHITE

# Attempt to force correct line-wrapping behavior by correctly recognizing the
# window dimensions.  Status can be checked with `shopt  | grep checkwinsize`.
# From: http://unix.stackexchange.com/questions/105958/terminal-prompt-not-wrapping-correctly
shopt -s checkwinsize &> /dev/null

# Set command line to respond (somewhat) like vi
set -o vi

# Allow clobbering of files.
set +o noclobber

# Ignore duplicate entries in the Bash history.
export HISTCONTROL=ignoreboth:erasedups

################################################################################
# OS-specific customization.
################################################################################

if [[ `uname` == 'Darwin' ]]; then
  source $HOME/.bashrc.os_darwin
elif [[ `uname` == 'Linux' ]]; then
  source $HOME/.bashrc.os_linux
fi

if [ -f ~/.ssh/id_rsa ]; then
  eval "$(ssh-agent -s)" &> /dev/null
  ssh-add ~/.ssh/id_rsa &> /dev/null
fi

################################################################################
# Machine-specific customizations.
################################################################################

# Mac OS X Workstation
if [[ "$HOSTNAME" = 'tempest'* ]]; then
  source $HOME/.bashrc.machine_tempest
elif [[ "$HOSTNAME" = 'gale'* ]]; then
  source $HOME/.bashrc.machine_gale
fi

################################################################################
# Final customizations.
################################################################################

# Set prompt.
PROMPT_COMMAND='set_bash_prompt'

################################################################################
# Functions.
################################################################################

# # View terminal colors / color codes.
# colors() {
#    local fgc bgc vals seq0

#    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
#    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
#    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
#    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

#    # foreground colors
#    for fgc in {30..37}; do
#       # background colors
#       for bgc in {40..47}; do
#          fgc=${fgc#37} # white
#          bgc=${bgc#40} # black

#          vals="${fgc:+$fgc;}${bgc}"
#          vals=${vals%%;}

#          seq0="${vals:+\e[${vals}m}"
#          printf "  %-9s" "${seq0:-(default)}"
#          printf " ${seq0}TEXT\e[m"
#          printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
#       done
#       echo;
#    done
# } &> /dev/null

# # From http://misc.flogisoft.com/bash/tip_colors_and_formatting#terminals_compatibility
# colors16() {
# for clbg in {40..47} {100..107} 49 ; do
# 	#Foreground
# 	for clfg in {30..37} {90..97} 39 ; do
# 		#Formatting
# 		for attr in 0 1 2 4 5 7 ; do
# 			#Print the result
# 			echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
# 		done
# 		echo #Newline
# 	done
# done
# } &> /dev/null

# # From http://misc.flogisoft.com/bash/tip_colors_and_formatting#terminals_compatibility
# colors256() {
# for fgbg in 38 48 ; do #Foreground/Background
# 	for color in {0..256} ; do #Colors
# 		#Display the color
# 		echo -en "\e[${fgbg};5;${color}m ${color}\t\e[0m"
# 		#Display 10 colors per lines
# 		if [ $((($color + 1) % 10)) == 0 ] ; then
# 			echo #New line
# 		fi
# 	done
# 	echo #New line
# done
# } &> /dev/null

# Function to truncate lines that would otherwise wrap in the terminal.
nowrap() {
   cut -c-$(tput cols);
} &> /dev/null

# Called by PROMPT_COMMAND to customize the prompt each time it is displayed.
# This permits live updating of the current git branch (provided and styled by
# get_git_branch).
set_bash_prompt() {
  if [ $(git symbolic-ref HEAD 2>/dev/null) ]; then
    get_git_branch
  else
    git_branch=""
  fi
  MYDIR=`pwd | perl -pe "s|^.*?(user\|home\|User).*?$USER|~|"`
  export PS1="${git_branch}\! \\u@${PS1HOST}\\h${RESET}[$MYDIR]> "
  printf "\033]0;%s\007" "${HOSTNAME%%.*}"
}

# Function to obtain the current git branch for the current working directory.
get_git_branch() {
  GITDARKGREY='\033[90m'
  GITRESET='\033[0m'
  git_branch=`git symbolic-ref HEAD 2>/dev/null | sed 's/^.*\/\(.*\)/[Git(\1)]/g'`
  git_branch="${GITDARKGREY}${git_branch}${GITRESET}\n"
}

# Make SSH key setup a function rather than automatic to keep it from
# interfering with TotalView's automatic session popup.
sshgo() {
  if [ -n "$PS1" ]; then
    if ! [ -n "$TMUX" ]; then
      eval "$(ssh-agent -s)" &> /dev/null
      eval "ssh-add ~/.ssh/id_rsa" &> /dev/null
    fi
  fi
}

# Function to use bc from the command line directly.
calc() {
  bc -l <<< "$@"
}

rename_images() {
  # for fil in *.jpg *.JPG; do datepath="$(identify -verbose $fil \
  #   | grep DateTimeOri | awk '{print $2"_"$3 }' \
  #   | sed s%:%_%g)"; mv -v $fil $datepath.jpg; done
  for fil in *.png; do datepath="$(identify -verbose $fil \
    | grep DateTimeOri | awk '{print $2"_"$3 }' \
    | sed s%:%_%g)"; mv -v $fil $datepath.png; done
}

thumbnail() {
  filename="${1%%.*}"
  extension="${1#*.}"
  convert -resize 400x $1 ${filename}_th400.${extension}
}

# Setup proxy toggles.
proxyon() {
  export  HTTP_PROXY=
  export HTTPS_PROXY=
  export   ALL_PROXY=$HTTP_PROXY
}
proxyoff() {
  export  HTTP_PROXY=
  export HTTPS_PROXY=
  export   ALL_PROXY=
}

# Add drop-shadow effect on image.
drop_shadow() {
  echo "Adding drop shadow to $1..."
  f="${1%%.*}"_drop_shadow_bg_transparent."${1##*.}"
  echo "  Generating $f with true transparency..."
  convert $1 \
    -trim -bordercolor white -border 0x0 \
    \( -clone 0 -background '#888888' -shadow 70x20+0+20 \) \
    -reverse -background none -layers merge +repage $f
  f="${1%%.*}"_drop_shadow_bg_white.jpg
  echo "  Generating $f with white background..."
  convert $1 \
    -trim -bordercolor white -border 0x0 \
    \( -clone 0 -background '#888888' -shadow 70x20+0+20 \) \
    -reverse -background white -layers merge +repage $f
  echo "  Done."
}

# Add drop-shadow effect on image.
drop_shadow_bordered() {
  echo "Adding drop shadow to $1..."
  f="${1%%.*}"_drop_shadow_bg_transparent."${1##*.}"
  echo "  Generating $f with true transparency..."
  convert $1 \
    -trim -bordercolor white -border 10x10 \
    \( -clone 0 -background '#888888' -shadow 70x20+0+20 \) \
    -reverse -background none -layers merge +repage $f
  f="${1%%.*}"_drop_shadow_bg_white.jpg
  echo "  Generating $f with white background..."
  convert $1 \
    -trim -bordercolor white -border 10x10 \
    \( -clone 0 -background '#888888' -shadow 70x20+0+20 \) \
    -reverse -background white -layers merge +repage $f
  echo "  Done."
}

# Print working file (absolute path + filename).
pwf() {
  echo `pwd`"/$1"
}

# Stamp header/footer text on images using bc and ImageMagick.
#   $1: filename
#   $2: text to stamp
#   $3: prefix
stamp() {
  if [ ! -f $1 ]; then
    return -1
  fi
  if [ -z "$2" ]; then
    stamptxt="Default Text"
  else
    stamptxt=$2
  fi
  if [ -z "$3" ]; then
    stampprefix="stamped_"
  else
    stampprefix="${3}_"
  fi

  wd=`identify -format %w $1`
  ht=`identify -format %h $1`
  pt=`bc <<< 0.02*$ht/0.75`
  marginbot=`bc <<< 0.5*$pt`
  margintop=`bc <<< 1.25*$pt`

  echo "Stamping ${stamptxt} onto ${stampprefix}$1..."
  convert \
    -pointsize $pt \
    -fill '#ff0000ff' \
    -gravity north -annotate +0+$margintop "${stamptxt}" \
    -gravity south -annotate +0+$marginbot "${stamptxt}" \
    $1 ${stampprefix}$1
}

# Draw red arrow on image.
#   $1: filename
#   $2: x coordinate of arrowhead tip
#   $3: y coordinate of arrowhead tip
#   $4: rotation angle of arrow (default: 0 degrees)
imdraw_arrow() {
  if [ ! -f $1 ]; then
    return -1
  fi

  wd=`identify -format %w $1`
  ht=`identify -format %h $1`

  x=${2:-100}
  y=${3:-100}
  r=${4:-0}
  l=`bc <<< "0.050*sqrt(${wd}*${wd}+${ht}*${ht})"`
  sa=`bc <<< "0.002*sqrt(${wd}*${wd}+${ht}*${ht})"`
  sl=`bc <<< "0.004*sqrt(${wd}*${wd}+${ht}*${ht})"`
  xb=`bc -l <<< "${x}-${l}*c(${r}*0.0174533)"`
  yb=`bc -l <<< "${y}-${l}*s(${r}*0.0174533)"`

  vector_arrowhead="path 'M 0,0 l -15,-5 +5,+5 -5,+5 +15,-5 z'"

  convert $1 \
          -draw " stroke red fill red
                  stroke-width ${sl}
                  line ${x},${y} ${xb},${yb}
                  stroke-width ${sa}
                  translate ${x},${y} rotate ${r} scale 2,2
                  ${vector_arrowhead}
                " \
    $1
}

pdf_join() {
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER -sOutputFile=$1 ${@:2}
}

rename_remove_spaces() {
  mv "$1" `echo $1 | tr ' ' '_'`
}

syncmusic() {
  rsync -avzPc --delete ~/Dropbox/MUSIC/* /Volumes/MUSIC/.
  cd /Volumes/MUSIC && rm -rf .Spotlight-V100 .fseventsd .Trashes
}

